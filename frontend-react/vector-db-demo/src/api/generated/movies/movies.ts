/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Vector DB LnL demo API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DefaultErrorResponse,
  Movie,
  MovieSearchArgs,
  UnprocessableEntityResponse
} from '../vector-db-demo.schemas';

import { axiosClient } from '../../axios-client';




export const getApiV1Movies = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClient<Movie[]>(
      {url: `/api/v1/movies`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MoviesQueryKey = () => {
    return [`/api/v1/movies`] as const;
    }

    
export const getGetApiV1MoviesQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1Movies>>, TError = DefaultErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Movies>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MoviesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Movies>>> = ({ signal }) => getApiV1Movies(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1Movies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MoviesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Movies>>>
export type GetApiV1MoviesQueryError = DefaultErrorResponse


export function useGetApiV1Movies<TData = Awaited<ReturnType<typeof getApiV1Movies>>, TError = DefaultErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Movies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Movies>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Movies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Movies<TData = Awaited<ReturnType<typeof getApiV1Movies>>, TError = DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Movies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Movies>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Movies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Movies<TData = Awaited<ReturnType<typeof getApiV1Movies>>, TError = DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Movies>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1Movies<TData = Awaited<ReturnType<typeof getApiV1Movies>>, TError = DefaultErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Movies>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MoviesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiV1MoviesSearch = (
    movieSearchArgs: MovieSearchArgs,
 signal?: AbortSignal
) => {
      
      
      return axiosClient<Movie[]>(
      {url: `/api/v1/movies/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: movieSearchArgs, signal
    },
      );
    }
  


export const getPostApiV1MoviesSearchMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1MoviesSearch>>, TError,{data: MovieSearchArgs}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1MoviesSearch>>, TError,{data: MovieSearchArgs}, TContext> => {

const mutationKey = ['postApiV1MoviesSearch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1MoviesSearch>>, {data: MovieSearchArgs}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1MoviesSearch(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1MoviesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1MoviesSearch>>>
    export type PostApiV1MoviesSearchMutationBody = MovieSearchArgs
    export type PostApiV1MoviesSearchMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    export const usePostApiV1MoviesSearch = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1MoviesSearch>>, TError,{data: MovieSearchArgs}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1MoviesSearch>>,
        TError,
        {data: MovieSearchArgs},
        TContext
      > => {

      const mutationOptions = getPostApiV1MoviesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiV1MoviesMovieMovieId = (
    movieId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClient<Movie>(
      {url: `/api/v1/movies/movie/${movieId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MoviesMovieMovieIdQueryKey = (movieId: string,) => {
    return [`/api/v1/movies/movie/${movieId}`] as const;
    }

    
export const getGetApiV1MoviesMovieMovieIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError = DefaultErrorResponse>(movieId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MoviesMovieMovieIdQueryKey(movieId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>> = ({ signal }) => getApiV1MoviesMovieMovieId(movieId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(movieId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MoviesMovieMovieIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>>
export type GetApiV1MoviesMovieMovieIdQueryError = DefaultErrorResponse


export function useGetApiV1MoviesMovieMovieId<TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError = DefaultErrorResponse>(
 movieId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MoviesMovieMovieId<TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError = DefaultErrorResponse>(
 movieId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MoviesMovieMovieId<TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError = DefaultErrorResponse>(
 movieId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1MoviesMovieMovieId<TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError = DefaultErrorResponse>(
 movieId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MoviesMovieMovieIdQueryOptions(movieId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiV1MoviesMovieMovieIdRecommendations = (
    movieId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosClient<Movie[]>(
      {url: `/api/v1/movies/movie/${movieId}/recommendations`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiV1MoviesMovieMovieIdRecommendationsQueryKey = (movieId: string,) => {
    return [`/api/v1/movies/movie/${movieId}/recommendations`] as const;
    }

    
export const getGetApiV1MoviesMovieMovieIdRecommendationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError = DefaultErrorResponse>(movieId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1MoviesMovieMovieIdRecommendationsQueryKey(movieId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>> = ({ signal }) => getApiV1MoviesMovieMovieIdRecommendations(movieId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(movieId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1MoviesMovieMovieIdRecommendationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>>
export type GetApiV1MoviesMovieMovieIdRecommendationsQueryError = DefaultErrorResponse


export function useGetApiV1MoviesMovieMovieIdRecommendations<TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError = DefaultErrorResponse>(
 movieId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MoviesMovieMovieIdRecommendations<TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError = DefaultErrorResponse>(
 movieId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>,
          TError,
          Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1MoviesMovieMovieIdRecommendations<TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError = DefaultErrorResponse>(
 movieId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiV1MoviesMovieMovieIdRecommendations<TData = Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError = DefaultErrorResponse>(
 movieId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1MoviesMovieMovieIdRecommendations>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiV1MoviesMovieMovieIdRecommendationsQueryOptions(movieId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



